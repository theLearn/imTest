apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'kotlin-kapt'

android {
    compileSdkVersion androidVersion.compileSdkVersion
    defaultConfig {
        applicationId "com.project.hc.imtest"
        minSdkVersion androidVersion.minSdkVersion
        targetSdkVersion androidVersion.targetSdkVersion
        versionCode androidVersion.versionCode
        versionName androidVersion.versionName
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
        multiDexEnabled true
    }
    buildTypes {
        debug{
            signingConfig getSignInfo("../sign.property")
        }
        release {
            minifyEnabled false
            signingConfig getSignInfo("../sign.property")
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    lintOptions {
        checkReleaseBuilds false
        abortOnError false
    }

    signingConfigs {
        debug {
            v1SigningEnabled true
            v2SigningEnabled true
        }
        release {
            v1SigningEnabled true
            v2SigningEnabled true
        }
    }

    dataBinding {
        enabled true
    }

    sourceSets {
        main {
            jniLibs.srcDir 'libs'
        }
    }

    //use legacy for android > 6.0
    useLibrary 'org.apache.http.legacy'
}

kapt {
    generateStubs = true
}

dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')
    testImplementation supportLibs.junit
    androidTestImplementation supportLibs.espresso
    androidTestImplementation supportLibs.runner
    kapt 'com.android.databinding:compiler:3.1.2'
    implementation project(':data')
    implementation project(':PhotoPicker')
    implementation project(':easeui')
    implementation 'com.google.zxing:core:3.3.0'
}

def getSignInfo(propFileName) {
    def com.android.build.gradle.internal.dsl.SigningConfig signingConfig = new com.android.build.gradle.internal.dsl.SigningConfig("signInfo")
    File propFile = file(propFileName)
    if (propFile.exists()) {
        def Properties props = new Properties()
        props.load(new FileInputStream(propFile))
        signingConfig.storeFile = file(props['STORE_FILE'])
        signingConfig.storePassword = props['STORE_PASSWORD']
        signingConfig.keyAlias = props['KEY_ALIAS']
        signingConfig.keyPassword = props['KEY_PASSWORD']
        signingConfig.v2SigningEnabled = false
    } else {
        signingConfig = null
    }
    return signingConfig
}
